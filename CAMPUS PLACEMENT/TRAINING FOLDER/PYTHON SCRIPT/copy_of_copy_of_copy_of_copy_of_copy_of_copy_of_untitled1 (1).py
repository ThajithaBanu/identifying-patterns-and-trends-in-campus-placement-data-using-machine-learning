# -*- coding: utf-8 -*-
"""Copy of Copy of Copy of Copy of Copy of Copy of Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yiOgG5oif19r-3HQWRAFFiou61HQBs1s
"""

import numpy as np
import pandas as pd
import os

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
from sklearn.model_selection import cross_val_score
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib
from sklearn.metrics import accuracy_score

df=pd.read_csv(r"/content/sample_data/collegePlace.csv")
df.head()

df.info()

df.isnull().sum()

def transformationplot(feature):
    plt.figure(figsize=(12,5))
    plt.subplot(1,2,1)
    sns.distplot(feature)

transformationplot(np.log(df['Age']))

df=df.replace(['Male'],[0])
df=df.replace(['Female'],[1])

df=df.replace(['Computer Science','Information Technology','Electronics And Communication','Mechanical','Electrical','Civil'],[0,1,2,3,4,5])

df=df.drop(['Hostel'],axis=1)

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['CGPA'],color='r')

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['PlacedOrNot'],color='r')

import seaborn as sns
sns.countplot(x='PlacedOrNot', hue='Gender' ,data=df)

sns.countplot(x='PlacedOrNot', hue='CGPA' ,data=df)

import seaborn as sns
import pandas as pd
from pandas import read_csv
pd=read_csv("/content/sample_data/collegePlace.csv")
sns.swarmplot(x='Age', hue ='Stream',data=df)

from sklearn.preprocessing import StandardScaler
sc= StandardScaler()
x_bal=sc.fit_transform (x_bal)

x_bal= pd.DataFrame(x_bal,name='Age')

from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.2,random_state = 100)
X_mean = X_train.mean(axis=0)
X_std = X_train.std(axis=0)
X_train = (X_train-X_mean)/X_std
X_test = (X_test-X_mean)/X_std
print(X_train.shape, X_test.shape)

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.5,random_state=50)

from sklearn.svm import SVC
model_SVC = svm.SVC()

classifier = svm.SVC(kernal='linear')

classifier.fit(X_train,y_train)

SVC(kernel='linear')

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,y_train)

print('Accuracy score of the training data:', training_data_accuracy)

import numpy as np
from.metrics import*
best_k = {"Regular":0}
best_score = {"Regular":0}
for k in range(3, 50, 2):
  
  knn_temp =KNeighborsClassifier(n_neighbors=k)
  knn_temp.fit(X_train, Y_train)
  predictions = classifier.predict(X_test)
  knn_temp_pred = knn_temp.predict(X_test)
  score = metrics.accuracy_score(Y_test, knn_temp_pred)*100
  if score >=best_score["Regular"] and score <100:
    best_score["Regular"] =score
    best_k["Regular"] =k

best_k ={"Regular":0}
best_score = {"Regular":0}
for k in range(3, 50, 2):
  
  knn_temp = KNeighborsClassifier(n_neighbors=k)
  knn_temp.fit(X_train,Y_train)
  knn_temp_pred = knn_temp_predict(X_test)
  score = metrics.accuracy_score(Y_test,knn_temp,knn_temp_pred) *100
  if score >= best_score["Regular"] and score < 100:
    best_score["Regular"] = score
    best_k["Regular"] = k
print("---Results---\nK:{}\nScore:{}".format(best_k,best_score))
knn = KNeighborsClassifier(n_neighbors=best_k["Regular"])
knn.fit(X_train,Y_train)
knn_pred = knn.predict(X_test)
testd = accuracy_score(knn_pred,Y_test)

from sklearn.neighbors import KNeighborsClassifier
from keras.models import load_model
classifier = load_model('/content/sample_data/collegePlace.csv')
best_k= {"Regular":0,"Upsampled":0}
best_score= {"Regular":0,"Upsampled":0}

for k in range (3, 50, 2): 
  knn_temp = KNeighborsClassifier(n_neighbors=k)
  knn_temp.fit(X_train, Y_train)
  knn_temp_pred = knn_temp.predict(X_test)
  score = metrics.accuracy_score(Y_test, knn_temp_pred)*100
  if score >= best_score["Regular"] and score <100:
    best_score["Regular"] = score
    best_k["Regular"] = k

knn_temp = KNeighborsClassifier(n_neighbors=k)
knn_temp.fit(X_train,Y_train)
knn_temp_pred = knn.predict(X_test)
score = metrics.accuracy_score(Y_test,knn_temp_pred)*100
if score >=best_score["Upsampled"] and  score <100:
  best_score["Upsampled"] = k 
print("---Results---\nK: {}\nScore: {}".format(best_k, best_score))

import keras
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras import layers

classifier = tf.keras.models.Sequential()
classifier.add(tf.keras.layers.Dense(6,activation ='relu'))
classifier.add(keras.layers.Dropout(0,50))
classifier.add(tf.keras.layers.Dense(6,activation ='relu'))
classifier.add(keras.layers.Dropout(0,50))

classifier.add(keras.layers.Dense(1,activation ='sigmoid'))

loss_1 = tf. keras.losses.BinaryCrossentropy()
 
classifier.compile(optimizer='Adam', loss=loss_1, metrics=['accuracy'])

classifier.fit(X_train, X_train, batch_size = 20, epochs= 100)

import pickle
sklearn.neighbors.KNeighborsClassifier(n_neighbors = k)
pickle.dump(knn,open(placement.pkl,'wb'))
model=pickle.load(open(placement.pkl,'rb'))

<section id="hero"class="d-flex flex-column justify-content-center">
 <div class="container">
  <div class="row justify-content-center">
    <div class="col-xl-8">
      <h1>Identifying Patterns and Trends in Campus Placement Data using Machine Learning</h1>
    </div>
  </div>
 </div>
</section>

<section id="about" class="about">
  <div class="container">

    <div class="section-title">
    <h2>Fill the details</h2>

    </div>
     <div class="row content">
      <div class="first">
       <form action="{{url_for('y_predict')}}" method="POST">
           <input type="number" id="sen1" name="sen1" placeholder="Age">
           <input type="number" id="sen2" name="sen2" placeholder="Gener M(0),F(0)">
           <input type="number" id="sen3" name="sen3" placeholder="Stream CS(0),IT(1),ECE(2),Mech(3),EEE(4)Civil(5)">
           <input type="number" id="sen4" name="sen4" placeholder="Internships">
           <input type="number" id="sen5" name="sen5" placeholder="CGPA">
           <input type="number" id="sen6" name="sen6" placeholder="Number of backlogs">
           <input type="submit" value="Submit">
  
       </form>
      </div>
     </div>
  </div>
  </section>

<section id="hero" class="d-flex flex-column justify-content-center">
     <div class="container">
      <div class="row justify-content-center">
       <div class="col-xl-8">
           <h1>The Prediction is: {{y}} </h1>
           <h3> 0 represents Not-Placed </h3>
           <h2> 1 represents Placed </h2>


       </div>
      </div>
     </div>
</section>

from flask import Flask, render_template, request
app=Flask(__name__)
import pickle
import joblib
model=pickle.load(open("collegePlace.pkl",'rb'))
ct=joblib.load('placement')

@app.route('/')
def hello():
  return render_template("index.html")

@app.route('/guest',methods=["POST"])
def Guest():
  sen1=request.form["sen1"]
  sen2=request.form["sen2"]
  sen3=request.form["sen3"]
  sen4=request.form["sen4"]
  sen5=request.form["sen5"]
  sen6=request.form["sen6"]


@app.route('/y_predicct',methods=["POST"])
def y_predict():
  x_test=[[(yo) for yo in request.fom.values()]]
  prediction =model.predict(x_test)

  prediction = prediction[0]
  
  return render_template("secondpage.html",y=prediction)

app.run(debug=True)